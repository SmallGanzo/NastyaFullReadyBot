import asyncio
import json
import random
from datetime import datetime
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz
from dotenv import load_dotenv
load_dotenv()


TOKEN = "7224594977:AAFVX-kSnfaH26RsONQrsNAbcxtEIEjNEKQ"
CHAT_ID_NASTYA = 813196147
bot = Bot(token=TOKEN)
dp = Dispatcher()

morning_messages = [
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ù–∞—Å—Ç–µ–Ω—å–∫–∞! üåû –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–µ–±–µ —É–ª—ã–±–∫–∏, –ª—ë–≥–∫–æ—Å—Ç—å –∏ –∫–∞–ø–µ–ª—å–∫—É –≤–æ–ª—à–µ–±—Å—Ç–≤–∞!",
    "–ü—Ä–æ—Å—ã–ø–∞–π—Å—è, –ù–∞—Å—Ç—è! ‚òÄÔ∏è –°–µ–≥–æ–¥–Ω—è ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ä–∞–¥–æ—Å—Ç–µ–π –∏ –±–æ–ª—å—à–∏—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π!",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ù–∞—Å—Ç—è! üíñ –ü—É—Å—Ç—å –≤—Å—ë —Å–ª–æ–∂–∏—Ç—Å—è –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, –∫–∞–∫ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å, –∞ –¥–µ–Ω—å –±—É–¥–µ—Ç –¥–æ–±—Ä—ã–º –∏ —Å–≤–µ—Ç–ª—ã–º!",
    "–ù–∞—Å—Ç—å, –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üå∏ –ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è —Ç–µ–±—è –∂–¥—ë—Ç —á—Ç–æ-—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∏ –≤–æ–ª—à–µ–±–Ω–æ–µ",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ù–∞—Å—Ç—è! üåà –ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç —Ç–∞–∫–∏–º –∂–µ —è—Ä–∫–∏–º, –∫–∞–∫ —Ç–≤–æ–∏ –≥–ª–∞–∑–∞, –∏ —Ç–∞–∫–∏–º –∂–µ —Ç—ë–ø–ª—ã–º, –∫–∞–∫ —Ç–≤–æ—ë —Å–µ—Ä–¥—Ü–µ!",
    "–ü—Ä–æ—Å–Ω–∏—Å—å –∏ —É–ª—ã–±–Ω–∏—Å—å! üòä –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å—á–∞—Å—Ç—å—è ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏ –µ–≥–æ!",
    "–ù–∞—Å—Ç–µ–Ω—å–∫–∞, –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üåπ –ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ª–µ–≥–∫–æ, –∞ –ª—é–±–∞—è –≥—Ä—É—Å—Ç—å —Ä–∞—Å—Ç–≤–æ—Ä—è–µ—Ç—Å—è –≤ —Ç–≤–æ–µ–π —É–ª—ã–±–∫–µ!",
    "–£—Ç—Ä–æ –Ω–∞—á–∞–ª–æ—Å—å, –∞ –∑–Ω–∞—á–∏—Ç, –≥–¥–µ-—Ç–æ —Ä—è–¥–æ–º —É–∂–µ –∂–¥—ë—Ç —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ! ‚ú® –î–µ—Ä–∂–∏ —Ö–≤–æ—Å—Ç –ø–∏—Å—Ç–æ–ª–µ—Ç–æ–º, –∫—Ä–∞—Å–∞–≤–∏—Ü–∞!",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ù–∞—Å—Ç—è! üêá –ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏—è—Ç–Ω—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏, –∞ –≤—Å–µ —Ç—Ä–µ–≤–æ–≥–∏ –æ–±–æ–π–¥—É—Ç —Ç–µ–±—è —Å—Ç–æ—Ä–æ–Ω–æ–π!",
    "–°–æ–ª–Ω—Ü–µ —Å–≤–µ—Ç–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è! ‚òÄÔ∏èüíõ –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–æ–¥–∞—Ä–∏—Ç —Ç–µ–±–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —Å–æ—Ç–Ω—é –ø–æ–≤–æ–¥–æ–≤ –¥–ª—è —Ä–∞–¥–æ—Å—Ç–∏!"
]

emotion_responses = {
    "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ üò¢": "–ù–µ –≥—Ä—É—Å—Ç–∏, –ù–∞—Å—Ç–µ–Ω—å–∫–∞! –í–æ—Ç –æ–±–Ω–∏–º–∞—à–∫–∏ —Ç–µ–±–µ ü§ó –∏ –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞ üíñ",
    "–ú–Ω–µ –æ–¥–∏–Ω–æ–∫–æ üè†": "–ù–∞—Å—Ç—è, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π! –¢—ã –Ω–µ –æ–¥–Ω–∞, —è –≤—Å–µ–≥–¥–∞ —Å —Ç–æ–±–æ–π! üå∏",
    "–ú–Ω–µ –≤–µ—Å–µ–ª–æ üòä": "–ó–¥–æ—Ä–æ–≤–æ! –ü—É—Å—Ç—å —É–ª—ã–±–∫–∞ –Ω–µ —Å—Ö–æ–¥–∏—Ç —Å –ª–∏—Ü–∞ üòÑ –í–æ—Ç —Ç–µ–±–µ –ª—É—á–∏–∫ —Ä–∞–¥–æ—Å—Ç–∏ ‚òÄÔ∏è",
    "–ó–∞–µ–±–ª–∞ —ç—Ç–∞ —É—á—ë–±–∞ üìö": "–£—á—ë–±–∞ ‚Äî —ç—Ç–æ —Å–ª–æ–∂–Ω–æ, –Ω–æ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! üí™ –í–æ—Ç –Ω–µ–º–Ω–æ–≥–æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ üåü"
}

EMOTIONS_FILE = "emotions.json"

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ üò¢"),
            KeyboardButton(text="–ú–Ω–µ –æ–¥–∏–Ω–æ–∫–æ üè†"),
        ],
        [
            KeyboardButton(text="–ú–Ω–µ –≤–µ—Å–µ–ª–æ üòä"),
            KeyboardButton(text="–ó–∞–µ–±–ª–∞ —ç—Ç–∞ —É—á—ë–±–∞ üìö"),
        ],
        [
            KeyboardButton(text="–î–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π üìî"),
        ],
    ],
    resize_keyboard=True
)

moscow_tz = pytz.timezone("Europe/Moscow")


def save_emotion(user_id: int, emotion: str):
    now = datetime.now(moscow_tz).strftime("%Y-%m-%d %H:%M:%S")
    entry = {"user_id": user_id, "emotion": emotion, "timestamp": now}

    try:
        with open(EMOTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        data = []

    data.append(entry)

    with open(EMOTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


async def send_morning_message():
    message = random.choice(morning_messages)
    await bot.send_message(CHAT_ID_NASTYA, message)


async def send_evening_message():
    await bot.send_message(CHAT_ID_NASTYA, "–ü—Ä–∏–≤–µ—Ç, –ù–∞—Å—Ç—è! –ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?üå∏")


@dp.message(Command("start"))
async def cmd_start(message: Message):
    if message.from_user.id != CHAT_ID_NASTYA:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ù–∞—Å—Ç–∏ üòä")
        return
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –ù–∞—Å—Ç—è! –Ø —Ç–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π üå∏\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π.",
        reply_markup=keyboard,
    )


@dp.message(F.text.in_(emotion_responses.keys()))
async def handle_emotion(message: Message):
    if message.from_user.id != CHAT_ID_NASTYA:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ù–∞—Å—Ç–∏ üòä")
        return

    emotion = message.text
    save_emotion(message.from_user.id, emotion)
    response = emotion_responses[emotion]
    await message.answer(response)


@dp.message(F.text == "–î–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π üìî")
async def show_emotions_log(message: Message):
    if message.from_user.id != CHAT_ID_NASTYA:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ù–∞—Å—Ç–∏ üòä")
        return

    try:
        with open(EMOTIONS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        data = []

    if not data:
        await message.answer("–î–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç üòå")
        return

    log_messages = []
    for entry in data[-10:]:
        time = entry["timestamp"]
        emo = entry["emotion"]
        log_messages.append(f"{time}: {emo}")

    await message.answer("üìî –¢–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏):\n\n" + "\n".join(log_messages))


async def scheduler_jobs():
    scheduler = AsyncIOScheduler(timezone=moscow_tz)
    scheduler.add_job(send_morning_message, "cron", hour=1, minute=40)
    scheduler.add_job(send_evening_message, "cron", hour=1, minute=41)
    scheduler.start()


async def main():
    await scheduler_jobs()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
